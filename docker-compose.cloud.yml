

services:
  # Infrastructure Services with Cloud-Native Features
  postgres-primary:
    image: postgres:15
    container_name: postgres-primary
    environment:
      POSTGRES_DB: event_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres-replica:
    image: postgres:15
    container_name: postgres-replica
    environment:
      POSTGRES_DB: event_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - cloud-network
    depends_on:
      postgres-primary:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer for High Availability
  nginx-lb:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./cloud-config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Application Services with Cloud-Native Features
  auth:
    build: ./services/auth
    container_name: auth-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres-primary:5432/event_booking
      - REDIS_URL=redis://redis-cluster:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=event-booking-platform-jwt-secret-key-2025-production-ready
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRES_IN=3600
    networks:
      - cloud-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  catalog:
    build: ./services/catalog
    container_name: catalog-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres-primary:5432/event_booking
      - REDIS_URL=redis://redis-cluster:6379
      - KAFKA_BROKERS=kafka:9092
    networks:
      - cloud-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking:
    build: ./services/booking
    container_name: booking-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres-primary:5432/event_booking
      - REDIS_URL=redis://redis-cluster:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - KAFKA_BROKERS=kafka:9092
      - AUTH_URL=http://auth:8000
      - CATALOG_URL=http://catalog:8000
    networks:
      - cloud-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment:
    build: ./services/payment
    container_name: payment-service
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres-primary:5432/event_booking
      - REDIS_URL=redis://redis-cluster:6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - STRIPE_SECRET_KEY=sk_test_your_stripe_key_here
      - STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_key_here
      - AUTH_URL=http://auth:8000
      - CATALOG_URL=http://catalog:8000
    networks:
      - cloud-network
    depends_on:
      postgres-primary:
        condition: service_healthy
      redis-cluster:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    container_name: frontend-app
    environment:
      - REACT_APP_API_URL=http://nginx-lb
      - REACT_APP_AUTH_URL=http://nginx-lb/auth
      - REACT_APP_CATALOG_URL=http://nginx-lb/catalog
      - REACT_APP_BOOKING_URL=http://nginx-lb/booking
      - REACT_APP_PAYMENT_URL=http://nginx-lb/payment
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Message Queue and Event Streaming
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./cloud-config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cloud-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - cloud-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_primary_data:
  postgres_replica_data:
  redis_data:
  rabbitmq_data:
  zookeeper_data:
  kafka_data:
  prometheus_data:
  grafana_data:

networks:
  cloud-network:
    driver: bridge
