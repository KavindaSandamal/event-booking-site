version: "3.8"

services:
  # ===== INFRASTRUCTURE SERVICES =====
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: eventdb
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - event-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - event-network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.11-management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - event-network
    restart: unless-stopped

  # ===== KAFKA STREAMING PLATFORM =====
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - event-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - event-network
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - event-network
    restart: unless-stopped

  # ===== MONITORING (LIGHTWEIGHT) =====
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    networks:
      - event-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - event-network
    restart: unless-stopped

  # ===== APPLICATION SERVICES =====
  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eventdb
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8001:8000"
    networks:
      - event-network
    restart: unless-stopped

  catalog:
    build:
      context: ./services/catalog
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eventdb
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - postgres
      - kafka
    ports:
      - "8002:8000"
    networks:
      - event-network
    restart: unless-stopped

  booking:
    build:
      context: ./services/booking
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eventdb
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://admin:admin@rabbitmq:5672/
      - AUTH_URL=http://auth:8000
      - CATALOG_URL=http://catalog:8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - auth
      - catalog
      - kafka
    ports:
      - "8003:8000"
    networks:
      - event-network
    restart: unless-stopped

  payment:
    build:
      context: ./services/payment
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/eventdb
      - REDIS_URL=redis://redis:6379
      - AUTH_URL=http://auth:8000
      - BOOKING_URL=http://booking:8000
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    depends_on:
      - postgres
      - redis
      - auth
      - booking
      - kafka
    ports:
      - "8004:8000"
    networks:
      - event-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_URL=http://localhost:8001
      - REACT_APP_CATALOG_URL=http://localhost:8002
      - REACT_APP_BOOKING_URL=http://localhost:8003
      - REACT_APP_PAYMENT_URL=http://localhost:8004
    depends_on:
      - auth
      - catalog
      - booking
      - payment
    ports:
      - "3000:3000"
    networks:
      - event-network
    restart: unless-stopped

  # ===== DATABASE ADMIN =====
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - event-network
    restart: unless-stopped

  # ===== CI/CD TOOLS =====
  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    group_add:
      - 999
    user: root
    networks:
      - event-network
    restart: unless-stopped

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - event-network
    restart: unless-stopped

  registry:
    image: registry:2
    ports:
      - "5000:5000"
    environment:
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - registry_data:/var/lib/registry
    networks:
      - event-network
    restart: unless-stopped

volumes:
  pgdata:
  pgadmin_data:
  redis_data:
  rabbitmq_data:
  zookeeper_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  jenkins_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  registry_data:


networks:
  event-network:
    driver: bridge
