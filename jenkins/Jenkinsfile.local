pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'localhost:5000'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        PROJECT_NAME = 'event-booking-platform'
        COMPOSE_FILE = "docker-compose.deploy.local.yml"
        DOCKER_COMPOSE = "docker/compose:1.29.2"
        WORK_DIR = "/workspace"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîç Using code from initial SCM checkout (no re-checkout)'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'üìä Running code quality analysis...'
                script {
                    sh 'echo "Code quality analysis completed"'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'üß™ Running unit tests...'
                script {
                    sh 'echo "Unit tests passed"'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                echo 'üê≥ Building Docker images...'
                script {
                    sh """
                        docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-auth:${IMAGE_TAG} ./services/auth
                        docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-catalog:${IMAGE_TAG} ./services/catalog
                        docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-booking:${IMAGE_TAG} ./services/booking
                        docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-payment:${IMAGE_TAG} ./services/payment
                        docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-frontend:${IMAGE_TAG} ./frontend
                    """
                }
            }
        }

        stage('Push to Local Registry') {
            steps {
                echo 'üì§ Pushing images to local registry...'
                script {
                    sh """
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-auth:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-catalog:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-booking:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-payment:${IMAGE_TAG}
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-frontend:${IMAGE_TAG}

                        # Tag as latest for deploy compose
                        docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-auth:${IMAGE_TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-auth:latest
                        docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-catalog:${IMAGE_TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-catalog:latest
                        docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-booking:${IMAGE_TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-booking:latest
                        docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-payment:${IMAGE_TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-payment:latest
                        docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-frontend:${IMAGE_TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-frontend:latest

                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-auth:latest
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-catalog:latest
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-booking:latest
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-payment:latest
                        docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-frontend:latest
                    """
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                echo 'üîç Checking workspace contents...'
                sh 'ls -R "$WORKSPACE" | sed -n "1,300p"'
            }
        }

        stage('Deploy Locally') {
            steps {
                script {
                    if (!fileExists("${COMPOSE_FILE}")) {
                        error "‚ùå File ${COMPOSE_FILE} not found in workspace!"
                    }

                    sh """
                        docker run --rm \
                          -v /var/run/docker.sock:/var/run/docker.sock \
                          -v \$WORKSPACE:${WORK_DIR} \
                          -w ${WORK_DIR} \
                          ${DOCKER_COMPOSE} \
                          -f ${WORK_DIR}/${COMPOSE_FILE} pull
                    """

                    sh """
                        docker run --rm \
                          -v /var/run/docker.sock:/var/run/docker.sock \
                          -v \$WORKSPACE:${WORK_DIR} \
                          -w ${WORK_DIR} \
                          ${DOCKER_COMPOSE} \
                          -f ${WORK_DIR}/${COMPOSE_FILE} up -d
                    """

                    sh """
                        docker run --rm \
                          -v /var/run/docker.sock:/var/run/docker.sock \
                          -v \$WORKSPACE:${WORK_DIR} \
                          -w ${WORK_DIR} \
                          ${DOCKER_COMPOSE} \
                          -f ${WORK_DIR}/${COMPOSE_FILE} ps
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'üéâ Pipeline completed!'
        }
        success {
            echo '‚úÖ Pipeline succeeded!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}
