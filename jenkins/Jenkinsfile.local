// Retry defaults for stages that reference them
def MAX_RETRIES = 3
def RETRY_DELAY = 5 // seconds

pipeline {
    agent any

environment {
    COMPOSE_FILE = "dc.yml"
    DOCKER_COMPOSE = "docker/compose:1.29.2"
    WORK_DIR = "/workspace"
}

    stages {
        stage('Checkout') {
            steps {
                echo 'üîç Using code from initial SCM checkout (no re-checkout)'
            }
        }

        stage('Code Quality Analysis') {
            steps {
                echo 'üìä Running code quality analysis...'
                script {
                    sh 'echo "Code quality analysis completed"'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'üß™ Running unit tests...'
                script {
                    sh 'echo "Unit tests passed"'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                echo 'üê≥ Building Docker images with retry...'
                script {
                    def services = ['auth', 'catalog', 'booking', 'payment', 'frontend']
                    for (service in services) {
                        echo "üîπ Building image for ${service}..."
                        def buildSucceeded = false
                        for (int i = 1; i <= MAX_RETRIES; i++) {
                            try {
                                def buildPath = (service == 'frontend') ? './frontend' : "./services/${service}"
                                sh "docker build -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-${service}:${IMAGE_TAG} ${buildPath}"
                                buildSucceeded = true
                                break
                            } catch (err) {
                                echo "‚ö†Ô∏è Build failed for ${service}, retry ${i}/${MAX_RETRIES}..."
                                sleep RETRY_SLEEP
                            }
                        }
                        if (!buildSucceeded) {
                            echo "‚ùå Build failed for ${service} after ${MAX_RETRIES} retries. Skipping push."
                            error "Failed to build image for ${service}."
                        }
                    }
                }
            }
        }

        stage('Push to Local Registry') {
            steps {
                echo 'üì§ Pushing images to local registry with checks...'
                script {
                    def services = ['auth', 'catalog', 'booking', 'payment', 'frontend']
                    for (service in services) {
                        def imageName = "${DOCKER_REGISTRY}/${PROJECT_NAME}-${service}:${IMAGE_TAG}"
                        if (sh(script: "docker image inspect ${imageName} > /dev/null 2>&1", returnStatus: true) == 0) {
                            echo "üöÄ Pushing ${imageName}..."
                            sh """
                                docker push ${imageName}
                                docker tag ${imageName} ${DOCKER_REGISTRY}/${PROJECT_NAME}-${service}:latest
                                docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-${service}:latest
                            """
                        } else {
                            echo "‚ö†Ô∏è Image ${imageName} does not exist. Skipping push."
                        }
                    }
                }
            }
        }

        stage('Debug Workspace') {
            steps {
                echo 'üîç Checking workspace contents...'
                sh 'ls -R "$WORKSPACE" | sed -n "1,300p"'
            }
        }

        stage('Deploy Locally') {
        steps {
            script {
            if (!fileExists("${COMPOSE_FILE}")) {
                error "‚ùå File ${COMPOSE_FILE} not found in workspace!"
            }

            // Sanity check inside the container
            sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:${WORK_DIR} -w ${WORK_DIR} \
                ${DOCKER_COMPOSE} sh -lc 'pwd; ls -l'
            """

            sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:${WORK_DIR} -w ${WORK_DIR} \
                ${DOCKER_COMPOSE} -f ${COMPOSE_FILE} pull
            """

            sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:${WORK_DIR} -w ${WORK_DIR} \
                ${DOCKER_COMPOSE} -f ${COMPOSE_FILE} up -d
            """

            sh """
                docker run --rm \
                -v /var/run/docker.sock:/var/run/docker.sock \
                -v $WORKSPACE:${WORK_DIR} -w ${WORK_DIR} \
                ${DOCKER_COMPOSE} -f ${COMPOSE_FILE} ps
            """
            }
        }
        }
    }

    post {
        always {
            echo 'üéâ Pipeline completed!'
        }
        success {
            echo '‚úÖ Pipeline succeeded!'
        }
        failure {
            echo '‚ùå Pipeline failed!'
        }
    }
}